{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/rudra/Documents/Code%20Collab/weather-event-notifier/frontend/src/components/FAQ.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from \"react\";\n\nconst faqData = [\n    {\n        question: \"What types of weather alerts can I subscribe to?\",\n        answer: \"You can subscribe to a variety of weather alerts, including heat warnings, rain forecasts, and extreme weather events such as storms or heavy snowfall. Our system allows you to choose the specific types of alerts that matter most to you.\"\n    },\n    {\n        question: \"How will I receive weather notifications?\",\n        answer: \"You can choose to receive notifications via email or SMS. During subscription, simply provide your preferred contact information and select your alert delivery method. We use trusted services like Nodemailer for emails and Twilio for SMS to ensure timely delivery.\"\n    },\n    {\n        question: \"How often will I get weather alerts?\",\n        answer: \"You can opt for either one-time alerts for specific events or set up recurring notifications based on your preferences. We check real-time weather data at user defined intervals and send alerts as soon as relevant conditions are detected.\"\n    },\n    {\n        question: \"Can I customize alerts for my location?\",\n        answer: \"Absolutely! When you subscribe, you can enter your city or location to receive weather alerts that are tailored just for your area. This way, you’ll always get updates that are relevant to where you live or work.\"\n    },\n    {\n        question: \"Is my contact information safe and can I unsubscribe anytime?\",\n        answer: \"Yes, your privacy is important to us. Your contact details are securely stored and used only for sending weather alerts. Every notification includes an unsubscribe link, and you can update or remove your subscription at any time.\"\n    },\n];\n\nconst FAQ: React.FC = () => {\n    const [openIndex, setOpenIndex] = useState<number | null>(null);\n\n    const toggle = (idx: number) => {\n        setOpenIndex(openIndex === idx ? null : idx);\n    };\n\n    return (\n        <section className=\"my-10\">\n            <h2 className=\"text-3xl font-bold mb-8 text-gray-800 text-center\">Frequently Asked Questions</h2>\n            <div className=\"max-w-5xl mx-auto px-4 md:px-8 space-y-4\">\n                {faqData.map((item, idx) => (\n                    <div\n                        key={idx}\n                        className=\"bg-white rounded-xl shadow-md transition hover:shadow-lg\"\n                    >\n                        <button\n                            onClick={() => toggle(idx)}\n                            className={`flex items-center justify-between w-full px-6 py-4 text-lg font-semibold focus:outline-none transition-colors duration-300\n                                ${openIndex === idx ? \"text-blue-700\" : \"text-gray-600 hover:text-blue-700\"}\n                            `}\n                            onBlur={e => e.target.blur()}\n\n\n                        >\n                            <span>{item.question}</span>\n                            <span className={`transform transition-transform duration-300 ${openIndex === idx ? \"rotate-180\" : \"\"}`}>\n                                ▼\n                            </span>\n                        </button>\n                        {openIndex === idx && (\n                            <div className=\"px-6 pb-4 text-base text-gray-500 animate-fadeIn\">\n                                {item.answer}\n                            </div>\n                        )}\n                    </div>\n                ))}\n            </div>\n            <style jsx>{`\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(-8px);}\n          to { opacity: 1; transform: translateY(0);}\n        }\n        .animate-fadeIn {\n          animation: fadeIn 0.3s ease;\n        }\n      `}</style>\n        </section>\n    );\n};\n\nexport default FAQ;\n"],"names":[],"mappings":";;;;;AACA;AADA;;;;AAGA,MAAM,UAAU;IACZ;QACI,UAAU;QACV,QAAQ;IACZ;IACA;QACI,UAAU;QACV,QAAQ;IACZ;IACA;QACI,UAAU;QACV,QAAQ;IACZ;IACA;QACI,UAAU;QACV,QAAQ;IACZ;IACA;QACI,UAAU;QACV,QAAQ;IACZ;CACH;AAED,MAAM,MAAgB;IAClB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE1D,MAAM,SAAS,CAAC;QACZ,aAAa,cAAc,MAAM,OAAO;IAC5C;IAEA,qBACI,8OAAC;kDAAkB;;0BACf,8OAAC;0DAAa;0BAAoD;;;;;;0BAClE,8OAAC;0DAAc;0BACV,QAAQ,GAAG,CAAC,CAAC,MAAM,oBAChB,8OAAC;kEAEa;;0CAEV,8OAAC;gCACG,SAAS,IAAM,OAAO;gCAItB,QAAQ,CAAA,IAAK,EAAE,MAAM,CAAC,IAAI;0EAHf,CAAC;gCACR,EAAE,cAAc,MAAM,kBAAkB,oCAAoC;4BAChF,CAAC;;kDAKD,8OAAC;;kDAAM,KAAK,QAAQ;;;;;;kDACpB,8OAAC;kFAAgB,CAAC,4CAA4C,EAAE,cAAc,MAAM,eAAe,IAAI;kDAAE;;;;;;;;;;;;4BAI5G,cAAc,qBACX,8OAAC;0EAAc;0CACV,KAAK,MAAM;;;;;;;uBAnBf;;;;;;;;;;;;;;;;;;;;AAoC7B;uCAEe","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///Users/rudra/Documents/Code%20Collab/weather-event-notifier/frontend/src/components/About.tsx"],"sourcesContent":["\"use client\";\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst About: React.FC = () => {\n    const cardRef = useRef<HTMLDivElement>(null);\n    const [visible, setVisible] = useState(false);\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" || !cardRef.current) return;\n\n        let timeoutId: NodeJS.Timeout | null = null;\n\n        const observer = new window.IntersectionObserver(\n            ([entry]) => {\n                if (timeoutId) clearTimeout(timeoutId);\n                // Debounce state change to avoid flicker\n                timeoutId = setTimeout(() => {\n                    setVisible(entry.isIntersecting);\n                }, 80);\n            },\n            { threshold: 0.3 }\n        );\n\n        observer.observe(cardRef.current);\n\n        return () => {\n            if (timeoutId) clearTimeout(timeoutId);\n            observer.disconnect();\n        };\n    }, []);\n\n    return (\n        <section id=\"about\" className=\"py-20 bg-gradient-to-br from-blue-50 via-gray-100 to-indigo-100\">\n            <div\n                ref={cardRef}\n                className={`relative max-w-5xl mx-auto px-8 py-12 bg-white/80 backdrop-blur-md rounded-2xl shadow-xl border border-gray-200\n          transition-all duration-1000 ease-[cubic-bezier(0.4,0,0.2,1)]\n          ${visible ? \"opacity-100 scale-100\" : \"opacity-0 scale-90\"}\n        `}\n                style={{ willChange: \"opacity, transform\" }}\n            >\n                <div className=\"flex justify-center mb-6\">\n                    <span className=\"inline-block w-20 h-1 rounded bg-gradient-to-r from-blue-500 via-indigo-400 to-blue-400\"></span>\n                </div>\n                <h2 className=\"text-4xl font-bold text-center text-gray-900 mb-4 tracking-tight\">\n                    About Weather Event Notifier\n                </h2>\n                <p className=\"text-lg text-gray-700 text-center mb-6 font-medium\">\n                    Stay ahead of the weather, always.\n                </p>\n                <p className=\"text-base text-gray-600 text-center mb-3\">\n                    <span className=\"font-semibold text-blue-700\">Weather Event Notifier</span> is a modern web application designed to keep you informed about significant weather events in your area.\n                    <br />\n                    Receive timely, reliable alerts for heat waves, storms, rain, and more; delivered directly to your inbox or phone.\n                </p>\n                <p className=\"text-base text-gray-600 text-center\">\n                    With location based customization and flexible notification options, you’re always in control.\n                </p>\n                <p className=\"text-base text-gray-600 text-center\">\n                    Our mission is to ensure you never miss a critical weather update, helping you make safer and smarter decisions every day.\n                </p>\n            </div>\n        </section>\n    );\n};\n\nexport default About;\n"],"names":[],"mappings":";;;;AACA;AADA;;;AAGA,MAAM,QAAkB;IACpB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACvC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,wCAAuD;;QAEvD,IAAI;QAEJ,MAAM;IAiBV,GAAG,EAAE;IAEL,qBACI,8OAAC;QAAQ,IAAG;QAAQ,WAAU;kBAC1B,cAAA,8OAAC;YACG,KAAK;YACL,WAAW,CAAC;;UAElB,EAAE,UAAU,0BAA0B,qBAAqB;QAC7D,CAAC;YACO,OAAO;gBAAE,YAAY;YAAqB;;8BAE1C,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC;wBAAK,WAAU;;;;;;;;;;;8BAEpB,8OAAC;oBAAG,WAAU;8BAAmE;;;;;;8BAGjF,8OAAC;oBAAE,WAAU;8BAAqD;;;;;;8BAGlE,8OAAC;oBAAE,WAAU;;sCACT,8OAAC;4BAAK,WAAU;sCAA8B;;;;;;wBAA6B;sCAC3E,8OAAC;;;;;wBAAK;;;;;;;8BAGV,8OAAC;oBAAE,WAAU;8BAAsC;;;;;;8BAGnD,8OAAC;oBAAE,WAAU;8BAAsC;;;;;;;;;;;;;;;;;AAMnE;uCAEe","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/rudra/Documents/Code%20Collab/weather-event-notifier/frontend/src/lib/api.ts"],"sourcesContent":["// lib/api.ts\n// Frontend API service to communicate with the backend\n\nimport axios from \"axios\";\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || \"https://weather-event-notifier.onrender.com/api\";\n\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  // Render free tier cold starts can take several seconds\n  timeout: 45000\n});\n\ntype BackendEnvelope<T> = {\n  success?: boolean;\n  data?: T;\n  subscription?: T;\n  message?: string;\n  error?: string;\n  errors?: string[],\n  [key: string]: unknown;\n};\n\nexport interface SubscriptionData {\n  email: string;\n  phone?: string;  // Made optional since it's optional in the form\n  location: string;  // Changed to string for form compatibility\n  alertType: 'rain' | 'heat' | 'storm' | 'snow' | 'wind';  // Changed from array to single value\n}\n\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n  errors?: string[];\n}\n\nclass ApiService {\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const method = (options.method || \"GET\").toLowerCase() as \"get\" | \"post\" | \"put\" | \"delete\";\n    const data = options.body ? JSON.parse(options.body as string) : undefined;\n    try {\n      // eslint-disable-next-line no-console\n      console.log(\"[api] request\", method.toUpperCase(), `${API_BASE_URL}${endpoint}`, data ?? null);\n\n      const res = await axiosInstance.request<T>({\n        url: endpoint,\n        method,\n        data,\n        headers: options.headers as Record<string, string> | undefined\n      });\n\n      const payload = res.data as unknown as BackendEnvelope<T>;\n\n      // eslint-disable-next-line no-console\n      console.log(\"[api] response\", `${API_BASE_URL}${endpoint}`, { ok: !(payload.error || payload.success === false) });\n\n      if (payload.error || (payload.success === false)) {\n        return { success: false, error: payload.error ?? payload.message ?? \"Request failed\", errors: payload.errors };\n      }\n\n      return {\n        success: true,\n        data: (payload.subscription ?? payload.data ?? (res.data as unknown as T)),\n        message: payload.message\n      };\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\"[api] error\", `${API_BASE_URL}${endpoint}`, err);\n      const message = (err as { message?: string })?.message || \"Network error\";\n      return { success: false, error: message };\n    }\n  }\n\n  // Create a new subscription\n  async createSubscription(subscriptionData: SubscriptionData): Promise<ApiResponse> {\n    // Transform the data to match backend expectations\n    const transformedData = {\n      location: {\n        city: subscriptionData.location\n      },\n      alertTypes: [subscriptionData.alertType],\n      email: subscriptionData.email,\n      phone: subscriptionData.phone || \"\"  // backend expects 'phone' field\n    };\n\n    // Base URL already contains /api\n    return this.request('/subscription', {\n      method: 'POST',\n      body: JSON.stringify(transformedData),\n    });\n  }\n\n  // Get server status\n  async getServerStatus(): Promise<ApiResponse> {\n    return this.request('/status'); // backend now mirrors /api/status\n  }\n\n  // Get all subscribers\n  async getSubscribers(): Promise<ApiResponse> {\n    return this.request('/subscribers');\n  }\n\n  // Test weather API\n  async testWeatherAPI(): Promise<ApiResponse> {\n    return this.request('/weather/test');\n  }\n\n  // Get weather by city\n  async getWeatherByCity(city: string): Promise<ApiResponse> {\n    return this.request(`/weather/city/${encodeURIComponent(city)}`);\n  }\n\n  // Detect weather events by city\n  async detectEventsByCity(city: string): Promise<ApiResponse> {\n    return this.request(`/events/city/${encodeURIComponent(city)}`);\n  }\n\n  // Delete subscription\n  async deleteSubscription(id: string): Promise<ApiResponse> {\n    return this.request(`/subscription/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Unsubscribe using ID\n  async unsubscribe(id: string): Promise<ApiResponse> {\n    return this.request(`/subscription/${id}/unsubscribe`);\n  }\n}\n\nexport const api = new ApiService();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///Users/rudra/Documents/Code%20Collab/weather-event-notifier/frontend/src/components/SubscriptionForm.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from 'react';\nimport { api } from '@/lib/api';\n\ninterface SubscriptionFormProps {\n  onSuccess?: () => void;\n}\n\nconst SubscriptionForm: React.FC<SubscriptionFormProps> = ({ onSuccess }) => {\n  const [formData, setFormData] = useState({\n    location: '',\n    alertType: 'rain' as 'rain' | 'heat' | 'storm' | 'snow' | 'wind',\n    email: '',\n    phone: ''\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\n\n  const alertTypeOptions = [\n    { value: 'rain', label: '🌧️ Rain Alert', description: 'Get notified about rain conditions' },\n    { value: 'heat', label: '🌡️ Heat Warning', description: 'High temperature warnings' },\n    { value: 'storm', label: '⛈️ Storm Alert', description: 'Thunderstorm and severe weather alerts' },\n    { value: 'snow', label: '❄️ Snow Alert', description: 'Snow and winter weather alerts' },\n    { value: 'wind', label: '💨 Wind Warning', description: 'High wind speed warnings' }\n  ];\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setMessage(null);\n\n    // Validation\n    if (!formData.email || !formData.location) {\n      setMessage({ type: 'error', text: 'Please fill in all required fields' });\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      // Debug: show what we are about to send\n      // eslint-disable-next-line no-console\n      console.log('[subscription] submit', formData);\n      const response = await api.createSubscription(formData);\n      // eslint-disable-next-line no-console\n      console.log('[subscription] response', response);\n      \n      if (response.success) {\n        setMessage({ \n          type: 'success', \n          text: 'Successfully subscribed to weather alerts! You will receive notifications based on your preferences.' \n        });\n        \n        // Reset form\n        setFormData({\n          location: '',\n          alertType: 'rain',\n          email: '',\n          phone: ''\n        });\n        \n        onSuccess?.();\n      } else {\n        setMessage({ \n          type: 'error', \n          text: response.error || 'Failed to create subscription' \n        });\n      }\n    } catch {\n      setMessage({ \n        type: 'error', \n        text: 'Network error. Please try again.' \n      });\n      // eslint-disable-next-line no-console\n      console.error('[subscription] network error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\n      <h2 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">\n        Subscribe to Weather Alerts\n      </h2>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Location */}\n        <div>\n          <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            City *\n          </label>\n          <input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            value={formData.location}\n            onChange={handleInputChange}\n            required\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500\"\n            placeholder=\"Boston\"\n          />\n          <p className=\"mt-1 text-sm text-gray-500\">Enter your city name</p>\n        </div>\n\n        {/* Alert Type */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Alert Type *</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            {alertTypeOptions.map((option) => (\n              <label \n                key={option.value} \n                className={`flex items-start space-x-3 p-3 border rounded-md cursor-pointer transition-colors ${\n                  formData.alertType === option.value \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 hover:bg-gray-50'\n                }`}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"alertType\"\n                  value={option.value}\n                  checked={formData.alertType === option.value}\n                  onChange={handleInputChange}\n                  className=\"mt-1 text-blue-600 focus:ring-blue-500\"\n                />\n                <div>\n                  <div className=\"font-medium text-gray-900\">{option.label}</div>\n                  <div className=\"text-sm text-gray-600\">{option.description}</div>\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Contact Information */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Contact Information</h3>\n          \n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email Address *\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500\"\n              placeholder=\"your.email@example.com\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Phone Number (Optional)\n            </label>\n            <input\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={formData.phone}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white text-gray-900 placeholder-gray-500\"\n              placeholder=\"+1234567890\"\n            />\n            <p className=\"mt-1 text-sm text-gray-500\">Include country code for SMS alerts</p>\n          </div>\n        </div>\n\n        {/* Message Display */}\n        {message && (\n          <div className={`p-4 rounded-md ${\n            message.type === 'success' \n              ? 'bg-green-50 border border-green-200 text-green-800' \n              : 'bg-red-50 border border-red-200 text-red-800'\n          }`}>\n            {message.text}\n          </div>\n        )}\n\n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className={`w-full py-3 px-4 rounded-md font-medium text-white transition-colors ${\n            isSubmitting\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'\n          }`}\n        >\n          {isSubmitting ? 'Creating Subscription...' : 'Subscribe to Weather Alerts'}\n        </button>\n      </form>\n\n      <div className=\"mt-6 text-center text-sm text-gray-600\">\n        <p>\n          By subscribing, you agree to receive weather alerts. \n          You can unsubscribe at any time using the link in our notifications.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionForm;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 834, "column": 0}, "map": {"version":3,"sources":["file:///Users/rudra/Documents/Code%20Collab/weather-event-notifier/frontend/src/components/Warmup.tsx"],"sourcesContent":["\"use client\";\nimport { useEffect } from 'react';\nimport { api } from '@/lib/api';\n\nexport default function Warmup() {\n    useEffect(() => {\n        (async () => {\n            try {\n                const res = await api.getServerStatus();\n                // eslint-disable-next-line no-console\n                console.log('[warmup] backend status', res);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.warn('[warmup] status failed', e);\n            }\n        })();\n    }, []);\n\n    return null;\n}\n\n\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;AAIe,SAAS;IACpB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,CAAC;YACG,IAAI;gBACA,MAAM,MAAM,MAAM,iHAAA,CAAA,MAAG,CAAC,eAAe;gBACrC,sCAAsC;gBACtC,QAAQ,GAAG,CAAC,2BAA2B;YAC3C,EAAE,OAAO,GAAG;gBACR,sCAAsC;gBACtC,QAAQ,IAAI,CAAC,0BAA0B;YAC3C;QACJ,CAAC;IACL,GAAG,EAAE;IAEL,OAAO;AACX","debugId":null}}]
}